#+PROPERTY: header-args :results verbatim :tangle pgpb.el :session pgpb :cache no

* Emacs package: pgpb.el

  Defines a package namespace that configures my Emacs environment the
  way I like it.

  Produces the file [[file:pgpb.el]] using =org-tangle (C-c C-v t)=.
  
  
** Warning: file is autogenerated via Org Babel tangle

   #+begin_src elisp
     ;;; WARNING: Do NOT edit this file by hand.
     ;; Instead edit the Org file and regenerate this
     ;; elisp script using: org-babel-tangle (C-c C-v t)
     #+end_src


** Require helper functions: [[file:pgpb-helpers.org]]

   Load the necessary functions to continue the configuration of
   Emacs:
   
   #+begin_src elisp
     (require 'pgpb-helpers)
   #+end_src


** Configure Emacs via helper functions

   The main work is done by calling helper functions to configure
   specific aspects of Emacs.

   #+begin_src elisp
     (pgpb-install-packages)
     (pgpb-ignore-custom-file)
     (pgpb-auto-dim-buffers)
     (pgpb-customize-vars)
     (pgpb-javascript)
     (pgpb-latex-opts)
     (pgpb-autosave)
     (pgpb-flyspell)
     (pgpb-magit)
     (pgpb-customize-appearance)
     (pgpb-linux-hacks)
     (pgpb-global-keys)

     ;;; Load Windows customizations
     (when (eq system-type 'windows-nt)
       (load-relative "./win10.el")
       (load-relative "./wsl.el")
       (message "Ok: windows hacks loaded.")
       )

     ;;; Darwin (MacOS) customizations
     (when (eq system-type 'darwin)
       (load-relative "./darwin.el")
       (message "Ok: macos hacks loaded.")
       )

     (load-relative "./abbrev.el")

     ;;; Helm stuff
     (require 'init-helm-projectile)

     ;;; Org Mode
     (require 'pgpb-org)
     (pgpb-org-main pgpb-gpg-keys
                    pgpb-org-dirs)


     (require 'pgpb-docker)

     (provide 'pgpb)
   #+end_src


** TODO Entrypoint: Inputs for Org environment

   The goal is to have a single entrypoint that collects all required
   arguments so that we can configure an Org environment in different
   machines by providing different values.

   #+begin_src elisp
     (defun pgpb-org-main (gpg-keys org-dirs)
       "Configure environment Org"
       (print (format "gpg-keys: %s; org-dirs: %s" gpg-keys org-dirs))
       (let ((agenda-files (nth 0 org-dirs))
             (journal-files (nth 1 org-dirs))
             (archive-files (nth 2 org-dirs)))
         (message "
     agenda: %s
     journal: %s
     archive: %s" agenda-files journal-files archive-files)))

     (load "~/dotfiles/emacs/pgpb-packages.el")
   #+end_src

   #+RESULTS:
   : pgpb-org-main

   
*** Example call: Configure Org mode
    :PROPERTIES:
    :ID:       93425A2C-AB14-417D-AC1D-9733C155DD31
    :END:

    #+begin_src elisp :tangle no :results output
      (pgpb-org-main (list "key1" "key2")
                     (list "/path/to/agenda/files"
                           "/path/to/journal/files"
                           "/path/to/archive/files"))
    #+end_src

    #+RESULTS:
    : "
    : \"gpg-keys: (key1 key2); org-dirs: (/path/to/agenda/files /path/to/journal/files /path/to/archive/files)\"
    : "
     




