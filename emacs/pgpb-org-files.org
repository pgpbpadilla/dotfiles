#+PROPERTY: header-args :results verbatim :tangle pgpb-org-files.el :session org-files :cache no

* TODO Create new encrypted Org files

  This package needs to be restructured.

  1. [ ] The main thing is that
     [[file:pgpb-org.el]] should orchestrate calls to functions in this file.
  2. [ ] there should not be calls to global variables or functions

     
  Provides utilities to create files to be used within Org mode.

  
** Warning: file is autogenerated via Org Babel tangle

   #+begin_src elisp
     ;;; WARNING: Do NOT edit this file by hand.
     ;; Instead edit the Org file and regenerate this
     ;; elisp script using: org-babel-tangle (C-c C-v t)
   #+end_src

   #+RESULTS:
   : nil
   

** TODO Encryption header

   1. [ ] The GPG keys should NOT be read from a global variable.
      Values are provided in [[file:bootstrap.org]] and then injected in
      [[id:93425A2C-AB14-417D-AC1D-9733C155DD31][Example call]]:

      #+begin_src bash :session none :tangle no :results verbatim
        ack -A 5 pgpb-org-main pgpb.el
      #+end_src

      #+RESULTS:
      #+begin_example
      (defun pgpb-org-main (gpg-keys org-dirs)
        "Configure environment Org"
        (print (format "gpg-keys: %s; org-dirs: %s" gpg-keys org-dirs))
        (let ((agenda-files (nth 0 org-dirs))
              (journal-files (nth 1 org-dirs))
              (archive-files (nth 2 org-dirs)))
      --
      (pgpb-org-main pgpb-gpg-keys
                     pgpb-org-dirs)


      (require 'pgpb-docker)

      #+end_example

      

   Every file needs to specify the local GPG key that will be used for
   encryption: 

   #+begin_src elisp
     (defvar my-gpg-key "pgpb.padilla@gmail.com"
       "The local GPG key to use for encryption.")

     (defvar
       gpg-header (format "# -*- mode:org; epa-file-encrypt-to: (\"%s\") -*-" my-gpg-key)
       "Emacs header to define local GPG encryption key."
      )
   #+end_src

   
** Encrypted file extension

   #+begin_src elisp
     (defvar extension ".org.gpg"
       "The extension to use for all encrypted Org files.")
   #+end_src


** TODO Listing special Org directories

   1. [ ] should not use global variables
      

   We want to list the directories that will be used as targets for
   new Org files:
   
   #+begin_src elisp
     (defun my-org-dirs ()
       "List special Org directories."
       (interactive)
       (cl-loop for symbol being the symbols
                when (and (boundp symbol)
                          (string-match-p "my-org-.*-dir" (symbol-name symbol)))
                collect symbol))
   #+end_src

   #+RESULTS:
   : my-org-dirs

   
*** Example output
    
    The function should return the list of all my special Org
    directories: 

    #+begin_src elisp :tangle no
      (my-org-dirs)
    #+end_src

    #+RESULTS:
    : (my-org-agenda-dir my-org-archive-dir my-org-journal-dir)


** TODO Create new Org file interactively

   1. [ ] no global vars

   Adapted from: [[id:062FBE2C-2267-4F81-9C15-0BC0A3DC84E8][General case: new empty Org file]]

   
*** TODO Generate output directory options

    1. [ ] no global vars 

    #+begin_src elisp
      (defun out-dir-options ()
        "Return a list of options from a list of symbols"
        (interactive)

        (mapcar (lambda (symbol)
                  (cons
                   (symbol-name symbol)
                   (symbol-value symbol))
                  )
                (my-org-dirs))
        )
    #+end_src

    #+RESULTS:
    : out-dir-options
    

*** Generate a random file name
    
    #+begin_src elisp
      (defun random-name ()
        "Return a random file name."
        (interactive)

        (require 'subr-x)
        (setq random-name
              (string-trim
               ;; todo: replace with pure-elisp function
               (shell-command-to-string
                "echo $(openssl rand -hex 5)"))))
    #+end_src

    #+RESULTS:
    : random-name

    
*** TODO Create Org file in specified dir

    1. [ ] should also work with a list of gpg keys
    2. [ ] no globals

    #+begin_src elisp
      (defun my-org-file ()
        "Create new Org file."
        (interactive)

        (setq options (out-dir-options))
        (setq selected (completing-read "Choose dir: " options nil t))
        (setq out-dir (cdr (assoc selected options)))

        (setq new-file (concat
                        (format "%s/%s" out-dir (random-name))
                        extension))

        ;; fix: get rid of the EPA key selection dialog
        ;; https://superuser.com/a/1446730/148349
        (setq-local epa-file-encrypt-to my-gpg-key)
        (write-region gpg-header nil new-file)
        (find-file-other-window new-file)
        (message new-file))
    #+end_src

    #+RESULTS:
    : my-org-file
   

*** Example: new file with random name

    #+begin_src elisp :tangle no :results value file
      (my-org-file)
    #+end_src

    #+RESULTS:
    [[file:~/org/0f6de25076/28e170260e.org.gpg]]


** Announce package

   #+begin_src elisp
     (provide 'pgpb-org-files)
   #+end_src

   #+RESULTS:
   : pgpb-org-files
