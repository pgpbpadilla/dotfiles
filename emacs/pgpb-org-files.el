;;; WARNING: Do NOT edit this file by hand.
;; Instead edit the Org file and regenerate this
;; elisp script using: org-babel-tangle (C-c C-v t)

(defun pgpb-org-agenda-files ()
  (directory-files-recursively my-org-agenda-dir pgpb-org-file-regex))

(defun pgpb-org-journal-files ()
  (directory-files-recursively my-org-journal-dir pgpb-org-file-regex))

(defun pgpb-org-archive-files ()
  (directory-files-recursively my-org-archive-dir pgpb-org-file-regex))

(defun pgpb-org-refile-targets ()
  (setq org-refile-targets
        '(
          (nil :maxlevel . 3)
          (org-agenda-files :maxlevel . 3)
          (pgpb-org-journal-files :maxlevel . 3)
          (pgpb-org-archive-files :maxlevel . 3)
          )
        ))


(defun pgpb-org-extra-files ()
  (append
   (pgpb-org-journal-files)
   (pgpb-org-archive-files))
  )

(defun pgpb-org-refile ()
       ;;; Define refile targets
  (pgpb-org-refile-targets)

  ;; (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm))

(defun pgpb-org-refresh-files () 
  "Reload agenda files, usually to include newly created files."
  (interactive)
  (setq org-agenda-files (pgpb-org-agenda-files))
  (pgpb-org-refile-targets)
  (message "All Org agenda files have been reloaded."))

(defun my-org-dirs ()
  "List special Org directories."
  (interactive)
  (cl-loop for symbol being the symbols
           when (and (boundp symbol)
                     (string-match-p "my-org-.*-dir" (symbol-name symbol)))
           collect symbol))

(defvar my-gpg-key "pgpb.padilla@gmail.com"
  "The local GPG key to use for encryption.")

(defvar
  gpg-header (format "# -*- mode:org; epa-file-encrypt-to: (\"%s\") -*-" my-gpg-key)
  "Emacs header to define local GPG encryption key."
 )

(defvar extension ".org.gpg"
  "The extension to use for all encrypted Org files.")

(defun out-dir-options ()
  "Return a list of options from a list of symbols"
  (interactive)

  (mapcar (lambda (symbol)
            (cons
             (symbol-name symbol)
             (symbol-value symbol))
            )
          (my-org-dirs))
  )

(defun random-name ()
  "Return a random file name."
  (interactive)

  (require 'subr-x)
  (setq random-name
        (string-trim
         ;; todo: replace with pure-elisp function
         (shell-command-to-string
          "echo $(openssl rand -hex 5)"))))

(defun my-org-file ()
  "Create new Org file."
  (interactive)

  (setq options (out-dir-options))
  (setq selected (completing-read "Choose dir: " options nil t))
  (setq out-dir (cdr (assoc selected options)))

  (setq new-file (concat
                  (format "%s/%s" out-dir (random-name))
                  extension))

  ;; fix: get rid of the EPA key selection dialog
  ;; https://superuser.com/a/1446730/148349
  (setq-local epa-file-encrypt-to my-gpg-key)
  (write-region gpg-header nil new-file)
  (find-file-other-window new-file)
  (message new-file))

(provide 'pgpb-org-files)
