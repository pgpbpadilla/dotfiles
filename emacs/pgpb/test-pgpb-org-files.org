#+PROPERTY: header-args :results verbatim :tangle test-pgpb-org-files.el :session test-pgpb :cache no
#+auto_tangle: yes

* test-pgpb-org-files.el: [[file:test-pgpb-org-files.el][open]]

  Run test in [[https://www.gnu.org/software/emacs/manual/html_mono/ert.html#Running-Tests-in-Batch-Mode][batch mode]]:
  
  #+begin_src bash :results verbatim :session none :tangle no
    ls test*
    emacs -batch -l ert -l test-pgpb-org-files.el -f ert-run-tests-batch-and-exit
  #+end_src

  #+RESULTS:
  #+begin_example
  test-pgpb-org-files.el
  test-pgpb-org-files.org

  Error: file-missing ("Cannot open load file" "No such file or directory" "/Users/pgpb.padilla/.emacs.d/pgpb/pgpb-test.el")
    mapbacktrace(#f(compiled-function (evald func args flags) #<bytecode -0xd35e60f6a512f81>))
    debug-early-backtrace()
    debug-early(error (file-missing "Cannot open load file" "No such file or directory" "/Users/pgpb.padilla/.emacs.d/pgpb/pgpb-test.el"))
    load("/Users/pgpb.padilla/.emacs.d/pgpb/pgpb-test.el")
    (lambda (file) (load (expand-file-name (concat "pgpb/" file) user-emacs-directory)))("pgpb-test.el")
    mapc((lambda (file) (load (expand-file-name (concat "pgpb/" file) user-emacs-directory))) ("pgpb-test.el" "pgpb-org-files.el"))
    eval-buffer(#<buffer  *load*> nil "/Users/pgpb.padilla/code/dotfiles-experimental/emacs/pgpb/test-pgpb-org-files.el" nil t)
    load-with-code-conversion("/Users/pgpb.padilla/code/dotfiles-experimental/emacs/pgpb/test-pgpb-org-files.el" "/Users/pgpb.padilla/code/dotfiles-experimental/emacs/pgpb/test-pgpb-org-files.el" nil t)
    load("/Users/pgpb.padilla/code/dotfiles-experimental/emacs/pgpb/test-pgpb-org-files.el" nil t)
    command-line-1(("-l" "ert" "-l" "test-pgpb-org-files.el" "-f" "ert-run-tests-batch-and-exit"))
    command-line()
    normal-top-level()
  #+end_example



** Load test dependencies

   #+begin_src elisp
     (mapc (lambda (file)
             (load (expand-file-name (concat "pgpb/" file) user-emacs-directory)))
           '("pgpb-test.el" "pgpb-org-files.el"))
   #+end_src

   
** Load expected gloabl variables

   Ensure global vars for my custom Org dirs are set:
   
   #+begin_src elisp
     (load (concat user-emacs-directory "early-init.el"))
   #+end_src


** List my Org directories

   #+begin_src elisp
     (ert-deftest pgpb-test-org-dirs ()
       "should return a list of my Org directories"
       (let ((expected '(pgpb-org-journal-dir
                         pgpb-org-archive-dir
                         pgpb-org-agenda-dir)))
         (should (equal (pgpb-org-dirs) expected))))
   #+end_src
