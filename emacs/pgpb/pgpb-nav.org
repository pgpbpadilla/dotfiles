#+PROPERTY: header-args :results verbatim :tangle pgpb-nav.el :session pgpb-nav :cache no
#+auto_tangle: t


* pgpb-nav: [[file:pgpb-nav.el]]

  Efficient navigation for buffers, files, Org headings, etc.

** Pre-requisities

   
*** Helm: incremental completions framework: [[https://github.com/emacs-helm/helm][github]]
    
    #+begin_src elisp
      (use-package helm
        :ensure t
        :config
        (helm-mode 1))
    #+end_src


*** Projectile: project interaction library: [[https://github.com/bbatsov/projectile][github]]

    #+begin_src elisp
      (use-package projectile
        :ensure t
        :init
        (projectile-mode +1)
        (setq projectile-completion-system 'helm)
        :bind (:map projectile-mode-map
                    ("s-p" . projectile-command-map)
                    ("C-c j" . projectile-command-map))
        )
    #+end_src


*** imenu: create menus: [[https://www.emacswiki.org/emacs/ImenuMode][wiki]]

    #+begin_quote
    Imenu produces menus for accessing locations in documents,
    typically in the current buffer.  
    #+end_quote
    
     #+begin_src elisp
       (use-package imenu-anywhere
         :ensure t
         :bind (("C-." . 'helm-imenu-anywhere)))
     #+end_src


** helm-projectile: Helm UI for Projectile: [[https://github.com/bbatsov/helm-projectile][github]]

   #+begin_src elisp
     (use-package helm-projectile
       :ensure t
       :bind (("C-c g a" . 'helm-projectile-ack))
       :config
       (helm-projectile-on))
   #+end_src


** ivy: [[https://github.com/abo-abo/swiper][github]]

   #+begin_quote
   Ivy, a generic completion mechanism for Emacs.
   #+end_quote

   
*** Quickly switch to frame by name
    :PROPERTIES:
    :ID:       357DD6F2-808B-449F-AA9F-3659B537B9C4
    :END:

    #+begin_src elisp
      (use-package ivy
        :ensure t
        :init
        (ivy-mode 1)
        :bind ("C-c f" . pgpb-switch-frame)
        :custom
        (ivy-use-virtual-buffers t)
        (ivy-count-format "%d/%d ")
        (enable-recursive-minibuffers t))

      (defun pgpb-vc-root (buffer-name)
        "Return the name of the parent git repo for the given BUFFER-NAME."
        (with-current-buffer buffer-name
          (let ((git-root (vc-root-dir)))
            (if git-root
                (file-name-nondirectory (directory-file-name git-root))
              "Not in a git repo"))))

      (defun pgpb-make-candidate (frame repo)
        "Generate frame candidates for interactive selection with Ivy."
        (let ((display-name (format "%s: [git: %s]"
                (frame-parameter frame 'name)
                (file-name-nondirectory (directory-file-name repo)))))
          (cons display-name frame)))

      (defun pgpb-active-buffer-in-frame (frame)
        "Return the name of the active buffer in the given frame."
        (window-buffer (frame-selected-window frame)))

      (defun pgpb-switch-frame ()
        "Switch to another frame interactively."
        (interactive)
        (ivy-read "Switch to frame: "
                  (mapcar (lambda (frame)
                            (let* ((buffer (pgpb-active-buffer-in-frame frame))
                                   (repo (or (pgpb-vc-root buffer) "No Git Repo")))
                              (pgpb-make-candidate frame repo)))
                          (frame-list))
                  :action (lambda (candidate)
                            (select-frame-set-input-focus (cdr candidate)))))
    #+end_src


** Provide package
   
   #+begin_src elisp
     (provide 'pgpb-nav)
   #+end_src
