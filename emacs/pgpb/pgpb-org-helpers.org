#+PROPERTY: header-args:elisp :results verbatim :tangle pgpb-org-helpers.el :session org-helpers :cache no
#+property: header-args:bash :session bash :tangle no :results verbatim

* pgpb-org-helpers.el

** Warning: file is autogenerated via Org Babel tangle

   #+begin_src elisp
     ;;; WARNING: Do NOT edit this file by hand.
     ;; Instead edit the Org file and regenerate this
     ;; elisp script using: org-babel-tangle (C-c C-v t)
   #+end_src
  
** TODO Depends on functions related to agenda files

** All helpers

   #+begin_src elisp
     (defun pgpb-org-custom-vars ()
       ;; Adapt indentation to heading level
       ;; https://orgmode.org/manual/Org-Indent-Mode.html
       (setq org-adapt-indentation t)
       ;; Disable indent-mode since it disables =org-adapt-indentation=
       (setq org-startup-indented nil)


       ;; Hide drawers on startup
       ;; https://orgmode.org/manual/Initial-visibility.html
       (setq org-startup-folded 'overview)

       ;; track progress history across emacs sessions
       (setq org-clock-persist 'history)
       (org-clock-persistence-insinuate)

       ;; Always create ID for links
       ;; https://orgmode.org/manual/Handling-Links.html#FOOT29
       (require 'org-id)
       ;; https://emacs.stackexchange.com/a/64240/11978
       (setq org-id-link-to-org-use-id t)

       ;; Additional places to use for indexing Org IDs
       (setq org-id-extra-files (pgpb-extra-files))


       ;; All Notes captured will go to this file
       (setq org-default-notes-file (concat org-directory "/notes.org.gpg"))

       (setq org-log-into-drawer t)
       ;; Inline image size
       (setq org-image-actual-width nil)

       ;; Export backends
       (setq org-export-backends '(ascii html icalendar latex beamer md odt))


       ;; Set colors for headings
       ;; DONE items are hard to read, I'd like them more prominent
       ;; Alternatives:
       ;; - SpringGreen4
       ;; - MidnightBlue
       (set-face-attribute 'org-headline-done nil :foreground "MidnightBlue"))

     (defun pgpb-org-install-packages ()
       ;; Packages: Org Mode extensions
       (unless (package-installed-p 'helm-org)
         (package-install 'helm-org))
       (unless (package-installed-p 'org-projectile)
         (package-install 'org-projectile))
       (global-set-key (kbd "C-c h") 'helm-org-agenda-files-headings)

       ;; Org Slides
       ;; https://github.com/takaxp/org-tree-slide
       (use-package org-tree-slide
         :ensure t
         :custom
         (org-image-actual-width nil))
       ;; todo: change to use :bind
       (global-set-key (kbd "C-c s") 'org-tree-slide-mode)
       )

     (defun pgpb-org-mobile ()
       ;; MobileOrg options
       ;; https://mobileorg.github.io/documentation/#using-dropbox
       ;; Set to the location of your Org files on your local system
       ;; (setq org-directory "~/org")
       ;; Set to the name of the file where new notes will be stored
       ;; (setq org-mobile-inbox-for-pull "~/org/flagged.org")
       ;; Set to <your Dropbox root directory>/MobileOrg.
       ;; (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
       )

     (defun pgpb-org-states ()
       ;;; TODO states
       (setq org-todo-keywords
             '((sequence "TODO" "|" "DONE" "WONTDO" "IGNORE" "INFO")))

       (setq org-todo-keyword-faces
             '(
               ("TODO" . org-warning) 
               ("WONTDO" . (:foreground "blue" :weight bold))
               ("INFO" . (:foreground "blue" :weight bold))
               )
             ))

     (defun pgpb-org-stuck ()
       ;; Configures Org Mode: how to identify Stuck projects
       (setq org-stuck-projects 
             '(
               ;; Exclude items with tags: notes, improve, info, template
               ;; Exclude items with TODO keywords: MAYBE, DONE, WONTDO, INFO
               ;; Include items that part of a =PROJECT=
               "-template-info-notes-improve+PROJECT/-MAYBE-DONE-WONTDO-INFO-IGNORE" 
               ("NEXT" "TODO") 
               ("@shop") 
               ;; Exclude every children of an item marked with the IGNORE TODO keyword
               "\\<IGNORE\\>")
             ))

     (defun pgpb-org-babel ()
       ;; enable evaluation of Shell code blocks
       (org-babel-do-load-languages
        'org-babel-load-languages
        '(
          (shell . t)
          (gnuplot . t)
          (latex . t)
          (plantuml . t)
          (python . t)
          )
        ))

     (defun pgpb-org-plantuml ()
       ;; PlantUML: https://eschulte.github.io/babel-dev/DONE-integrate-plantuml-support.html
       (require 'subr-x)
       (setq brew-prefix (string-trim (shell-command-to-string "brew --prefix")))
       ;; source: brew list plantuml
       (setq plantuml-jar "Cellar/plantuml/1.2023.13/libexec/plantuml.jar")
       (setq org-plantuml-jar-path (format "%s/%s" brew-prefix plantuml-jar)))

     (defun pgpb-org-looks ()
       ;; Show fancy bullets
       ;; https://github.com/sabof/org-bullets
       (unless (package-installed-p 'org-bullets)
         (package-install 'org-bullets))
       (require 'org-bullets)
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

     (defun pgpb-capture-templates ()
       ;;; Capture templates

       ;; Minutes of meeting 
       (defun my/mom-template ()

         (setq title "* %?\t:termin:mom:\n  %T\n\n"
               people "** People \n\n   1. xyz\n\n"
               minutes "** Minutes of meeting\n\n"
               actions "** Action Items [/]\n\n*** TODO xyz\n\n")
         ;; return the template as a string
         (concat title people minutes actions))

       (setq org-capture-templates
             '(
               ("m" "Minutes of meeting" entry (file "") (function my/mom-template))
               ("j" "Journal entry" entry (file "") "* %?\n %U")
               )))


     (defun pgpb-org-online-images ()
       ;;; Load Online images
       ;; https://emacs.stackexchange.com/questions/42281/org-mode-is-it-possible-to-display-online-images
       ;; example: [[imghttp://tn-home.de/Pic/tn-home.png]]
       ;; To show images use: =C-c C-x C-v=

       ;; Requires cloning: https://github.com/TobiasZawada/org-yt
       (dolist (i (list (concat user-emacs-directory "org-yt")))
         ;; Add all at end of `load-path' to avoid conflicts.
         (add-to-list 'load-path (file-name-as-directory i) t))
       (defun org-image-link (protocol link _description)
         "Interpret LINK as base64-encoded image data."
         (cl-assert (string-match "\\`img" protocol) nil
                    "Expected protocol type starting with img")
         (let ((buf (url-retrieve-synchronously (concat (substring protocol 3) ":" link))))
           (cl-assert buf nil
                      "Download of image \"%s\" failed." link)
           (with-current-buffer buf
             (goto-char (point-min))
             (re-search-forward "\r?\n\r?\n")
             (buffer-substring-no-properties (point) (point-max)))))

       (org-link-set-parameters
        "imghttp"
        :image-data-fun #'org-image-link)

       (org-link-set-parameters
        "imghttps"
        :image-data-fun #'org-image-link))

     (defun pgpb-org-linux ()
       (when (eq system-type 'gnu/linux)
         (message "Inside a Linux system")
         ;;; Handle custom protocols
         ;;; Should open Gnucash links with Gnucash app
         (org-add-link-type "gnucash" (lambda (path) (browse-url-xdg-open path)))
         ;;; Should open Gnucash links with PDF viewer
         (org-add-link-type "pdf" (lambda (path) (browse-url-xdg-open path)))

         ;;; Export PDF with Latex on Linux
         (setq org-latex-pdf-process '("latexmk -pdf -interaction=nonstopmode -output-directory=%o %f"))

         ))


     (defun pgpb-org-keys ()
       ;;; Shortcuts
       (global-set-key (kbd "C-c l") 'org-store-link)
       (global-set-key (kbd "C-c i") 'org-insert-last-stored-link)
       (global-set-key (kbd "C-c a") 'org-agenda)
       (global-set-key (kbd "C-c c") 'org-capture))

     (defun pgpb-org-darwin ()
       (when (eq system-type 'darwin)
         (message "Inside a Darwin system")
         (org-add-link-type "gnucash" (lambda (path)
                                        (shell-command (concat "open " path))))
         ))

     (defun pgpb-autofill ()
       ;; Auto-insert new lines for long lines
       (add-hook 'org-mode-hook 'turn-on-auto-fill))
   #+end_src


** Encrypting Org files - [[https://orgmode.org/worg/org-tutorials/encrypting-files.html][org:tutorial]]

   My [[https://www.emacswiki.org/emacs/EasyPG][EasyPG]] config expects =gpg= binary to be installed and also be
   in the system =PATH=.

   #+begin_src elisp
     (defun pgpb-org-easypg ()
       (require 'epa-file)
       (epa-file-enable)
       (require 'epg)
       (setq epg-gpg-program "gpg"
             epg-pinentry-mode 'loopback))
   #+end_src


   If something does not work, check if the GnuPG binary is available
   in the system's path:

   #+begin_src bash 
   type -P gpg
   #+end_src

   #+RESULTS:
   : /usr/local/bin/gpg

   

** Announce package

   #+begin_src elisp
     (provide 'pgpb-org-helpers)
   #+end_src
