#+PROPERTY: header-args :results verbatim :tangle pgpb-org-files.el :session org-files :cache no

* TODO pgpb-org-files.el

  Helper functions to deal with special categories of Org files,
  e.g. agenda, journal and archive files.

   
** TODO Package refactor/restructuring
   
   This package needs to be restructured

   1. [ ] The main thing is that
      - [ ] this package should mostly contain function definitions
      - [ ] [[file:pgpb-org.el]] should orchestrate calls to functions in this file.
   2. [ ] there should not be calls to global variables or functions
     
  
** Warning: file is autogenerated via Org Babel tangle

   #+begin_src elisp
     ;;; WARNING: Do NOT edit this file by hand.
     ;; Instead edit the Org file and regenerate this
     ;; elisp script using: org-babel-tangle (C-c C-v t)
   #+end_src

   #+RESULTS:
   : nil
   

** Org file categories

   I have three categories of files: Agenda, Journal and Archive.
   

*** Files are encrypted using Gnupg

     #+begin_src elisp
       (defvar pgpb-org-file-extension ".org.gpg"
         "File extension for encrypted Org files.")
     #+end_src


     In order find them all dynamically we use a regex:
     
     #+begin_src elisp
       (defvar pgpb-org-file-regex (concat "\\" pgpb-org-file-extension "$")
         "Regex to search entrypted Org files.")
     #+end_src


*** Agenda files

      files that should be used when building the
      agenda view(s):

      #+begin_src elisp
        (defun pgpb-agenda-files ()
          (directory-files-recursively pgpb-agenda-dir pgpb-org-file-regex))
      #+end_src
      

*** Journal files
      files that I use to write entries that I will
      eventually want to query, e.g., any note that is not a task but
      that I might come back to but there's no action to take

      - these files are not used to build the agenda

      - it is possible to refile to these files


      #+begin_src elisp
        (defun pgpb-journal-files ()
          (directory-files-recursively pgpb-journal-dir pgpb-org-file-regex))
      #+end_src
      

*** Archive files
      files that I mostly keep out of [[https://en.wikipedia.org/wiki/Fear_of_missing_out][FOMO]].
      I purposely don't tag entries in these files with Org's keyword
      =:ARCHIVE:= since they are already in a fully separate location.

      - these files are not used to build the agenda

      - it is possible to refile to these files


      #+begin_src elisp
        (defun pgpb-archive-files ()
          (directory-files-recursively pgpb-archive-dir pgpb-org-file-regex))
      #+end_src
   
   
*** DONE Updating file collections

    #+begin_src elisp
      (defun pgpb-refresh-refile-targets ()
        (setq org-refile-targets
              '(
                (nil :maxlevel . 3)
                (org-agenda-files :maxlevel . 3)
                (pgpb-journal-files :maxlevel . 3)
                (pgpb-archive-files :maxlevel . 3)
                )
              ))

      (defun pgpb-org-refile ()
        ;; (setq org-refile-use-outline-path 'file)
        (setq org-outline-path-complete-in-steps nil)
        (setq org-refile-allow-creating-parent-nodes 'confirm))

      (defun pgpb-extra-files ()
        (append
         (pgpb-journal-files)
         (pgpb-archive-files))
        )

      (defun pgpb-refresh-org () 
        "Reload agenda files, usually to include newly created files."
        (interactive)
        (setq org-agenda-files (pgpb-agenda-files))
        (pgpb-refresh-refile-targets)
        (message "All Org agenda files have been reloaded."))

    #+end_src


*** TODO Listing special Org directories

    1. [ ] should not use global variables
      

    We want to list the directories that will be used as targets for
    new Org files:
   
    #+begin_src elisp
      (defun my-org-dirs ()
        "List special Org directories."
        (interactive)
        (cl-loop for symbol being the symbols
                 when (and (boundp symbol)
                           (string-match-p "my-org-.*-dir" (symbol-name symbol)))
                 collect symbol))
    #+end_src

    #+RESULTS:
    : my-org-dirs

   
**** Example output
    
     The function should return the list of all my special Org
     directories: 

     #+begin_src elisp :tangle no
       (my-org-dirs)
     #+end_src

     #+RESULTS:
     : (my-org-agenda-dir my-org-archive-dir my-org-journal-dir)


** TODO Create new encrypted Org file interactively

   1. [ ] no global vars

   Adapted from: [[id:062FBE2C-2267-4F81-9C15-0BC0A3DC84E8][General case: new empty Org file]]

   
*** TODO Constants

**** TODO Encryption header

     1. [ ] The GPG keys should NOT be read from a global variable.
        Values are provided in [[file:bootstrap.org]] and then injected in
        [[id:93425A2C-AB14-417D-AC1D-9733C155DD31][Example call]]:

        #+begin_src bash :session none :tangle no :results verbatim
          ack -A 5 pgpb-org-main pgpb.el
        #+end_src

        #+RESULTS:
        #+begin_example
        (defun pgpb-org-main (gpg-keys org-dirs)
          "Configure environment Org"
          (print (format "gpg-keys: %s; org-dirs: %s" gpg-keys org-dirs))
          (let ((agenda-files (nth 0 org-dirs))
                (journal-files (nth 1 org-dirs))
                (archive-files (nth 2 org-dirs)))
        --
        (pgpb-org-main pgpb-gpg-keys
                       pgpb-org-dirs)


        (require 'pgpb-docker)

        #+end_example

      

     Every file needs to specify the local GPG key that will be used for
     encryption: 

     #+begin_src elisp
       (defvar my-gpg-key "pgpb.padilla@gmail.com"
         "The local GPG key to use for encryption.")

       (defvar
         gpg-header (format "# -*- mode:org; epa-file-encrypt-to: (\"%s\") -*-" my-gpg-key)
         "Emacs header to define local GPG encryption key."
        )
     #+end_src

   


*** TODO Output directory

    1. [ ] no global vars 

    #+begin_src elisp
      (defun out-dir-options ()
        "Return a list of options from a list of symbols"
        (interactive)

        (mapcar (lambda (symbol)
                  (cons
                   (symbol-name symbol)
                   (symbol-value symbol))
                  )
                (my-org-dirs))
        )
    #+end_src

    #+RESULTS:
    : out-dir-options
    

*** Output file name

    We choose a random name, two advantages:

    1. we don't want to reveal anything about the file in it's name
    2. it can be automated

       
    #+begin_src elisp
      (defun random-name ()
        "Return a random file name."
        (interactive)

        (require 'subr-x)
        (setq random-name
              (string-trim
               ;; todo: replace with pure-elisp function
               (shell-command-to-string
                "echo $(openssl rand -hex 5)"))))
    #+end_src

    #+RESULTS:
    : random-name

    
*** TODO Create and open file in a new window

    1. [ ] should also work with a list of gpg keys
    2. [ ] no globals

    #+begin_src elisp
      (defun my-org-file ()
        "Create new Org file."
        (interactive)

        (setq options (out-dir-options))
        (setq selected (completing-read "Choose dir: " options nil t))
        (setq out-dir (cdr (assoc selected options)))

        (setq new-file (concat
                        (format "%s/%s" out-dir (random-name))
                        pgpb-org-file-extension))

        ;; fix: get rid of the EPA key selection dialog
        ;; https://superuser.com/a/1446730/148349
        (setq-local epa-file-encrypt-to my-gpg-key)
        (write-region gpg-header nil new-file)
        (find-file-other-window new-file)
        (message new-file))
    #+end_src

    #+RESULTS:
    : my-org-file
   

*** Usage example

    The function can be called interactively: =M-x my-org-file=l

    You can also run it with the following snippet:

    #+begin_src elisp :tangle no :results value file
      (my-org-file)
    #+end_src

    #+RESULTS:
    [[file:~/org/0f6de25076/28e170260e.org.gpg]]


** Announce package

   #+begin_src elisp
     (provide 'pgpb-org-files)
   #+end_src

   #+RESULTS:
   : pgpb-org-files
