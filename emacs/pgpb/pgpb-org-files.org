#+PROPERTY: header-args :results verbatim :tangle pgpb-org-files.el :session pgpb :cache no
#+auto_tangle: true

* pgpb-org-files.el: [[file:pgpb-org-files.el][open]]

  Helper functions to deal with special categories of Org files,
  e.g. agenda, journal and archive files.

   
** Warning: file is autogenerated via Org Babel tangle

   #+begin_src elisp
     ;;; WARNING: Do NOT edit this file by hand.
     ;; Instead edit the Org file and regenerate this
     ;; elisp script using: org-babel-tangle (C-c C-v t)
   #+end_src

   #+RESULTS:
   : nil
   

** Org file categories

   I have three categories of files: Agenda, Journal and Archive.
   When new files are created, they are located in the corresponding
   subdirectory defined in: [[id:B588E4F2-7E78-4204-98F1-E0106538FB21][Set special Org directories]].

   The [[id:9F69AE66-FE3A-44A5-8518-A16A6C4268AC][Directories that contain Org files]] are given by: 

   #+begin_src elisp :tangle no :session none
     (pgpb-org-dirs)
   #+end_src

   #+RESULTS:
   : (pgpb-org-journal-dir pgpb-org-archive-dir pgpb-org-agenda-dir)
   

*** Encrypted Org files use extension: =.org.gpg=

     #+begin_src elisp
       (defvar pgpb-org-file-extension ".org.gpg"
         "File extension for encrypted Org files.")
     #+end_src


     In order find them all dynamically we use a regex:
     
     #+begin_src elisp
       (defvar pgpb-org-file-regex (concat "\\" pgpb-org-file-extension "$")
         "Regex to search entrypted Org files.")
     #+end_src


*** Agenda files

    Files that should be used when building the agenda view(s):

    #+begin_src elisp
      (defun pgpb-org-agenda-files ()
        (directory-files-recursively pgpb-org-agenda-dir pgpb-org-file-regex))
    #+end_src

    #+RESULTS:
    : pgpb-org-agenda-files
      

*** Journal files

    Files that I use to write entries that I will eventually want to
    query, e.g., any note that is not a task but that I might come
    back to but there's no action to take:

    1) these files are not used to build the agenda
    2) it is possible to refile to these files


    #+begin_src elisp
      (defun pgpb-org-journal-files ()
        (directory-files-recursively pgpb-org-journal-dir pgpb-org-file-regex))
    #+end_src
      

*** Archive files
    
    Files that I mostly keep out of [[https://en.wikipedia.org/wiki/Fear_of_missing_out][FOMO]].
    
    I purposely don't tag entries in these files with Org's keyword
    =:ARCHIVE:= since they are already in a fully separate location.

    1) these files are not used to build the agenda
    2) it is possible to refile to these files


    #+begin_src elisp
      (defun pgpb-org-archive-files ()
        (directory-files-recursively pgpb-org-archive-dir pgpb-org-file-regex))
    #+end_src

    #+RESULTS:
    : pgpb-org-archive-files
   
   
** Create new Org file with encryption enabled

   Adapted from: [[id:062FBE2C-2267-4F81-9C15-0BC0A3DC84E8][General case: new empty Org file]]


*** Usage
    
**** Call interactively: =M-x pgpb-org-new=
**** Run with Babel: =C-c C-c=
     #+begin_src elisp :tangle no :results value file
       (pgpb-org-new)
     #+end_src

     #+RESULTS:
     [[file:~/org/31e520d4df/9beb1205f9.org.gpg]]


*** Define function to create new Org files
    :PROPERTIES:
    :ID:       B564F916-94A4-4DB1-A115-E423C8D7980E
    :END:
    
    The interactive function will ask the user to select the target
    directory for the new Org file and will create an empty Org file
    with a random name.

    #+begin_src elisp
      (defun pgpb-org-new ()
        "Create new Org file with encryption enabled."
        (interactive)

        ;; =let*= binds variables sequentially
        ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Local-Variables.html#index-let_002a
        (let* ((options (pgpb-org-new-options))
               (selected (completing-read "Choose dir: " options nil t))
               (out-dir (cdr (assoc selected options)))
               (filename (format "%s/%s" out-dir (pgpb-random-name)))
               (new-file (concat filename pgpb-org-file-extension)))

          (setq-local epa-file-encrypt-to pgpb-gpg-key)
                  (write-region pgpb-org-header nil new-file)
                  (find-file-other-window new-file)
                  (message new-file)))
    #+end_src

    #+RESULTS:
    : pgpb-org-new
   

    
*** Generating the target directory options
    :LOGBOOK:
    - CLOSING NOTE [2024-08-31 Sa 22:09]
    :END:

    The following function creates a list of options from the list of
    possible output directories:
    
    #+begin_src elisp
      (defun pgpb-org-new-options ()
        "Create map of Org dir symbols to their values"
        (interactive)

        (mapcar (lambda (symbol)
                  (cons
                   (symbol-name symbol)
                   (symbol-value symbol))
                  )
                (pgpb-org-dirs)))
    #+end_src

    #+RESULTS:
    : pgpb-org-new-options


**** Directories that contain Org files
     :PROPERTIES:
     :ID:       9F69AE66-FE3A-44A5-8518-A16A6C4268AC
     :END:

     Directories that will contain Org files are defined in global
     variables: [[id:B588E4F2-7E78-4204-98F1-E0106538FB21][Special Org directories]].

     To dynamically collect all of them we iterate over the list of
     known symbols with =cl-loop= and keep only those symbols matching
     the predefined pattern.
    
     #+begin_src elisp
       (defun pgpb-org-dirs ()
         (interactive)

         (let ((org-dirs
                (cl-loop for symbol being the symbols
                         when (and (boundp symbol)
                                   (string-match-p "^pgpb-org-.*-dir$" (symbol-name symbol)))
                         collect symbol)))

           (if (called-interactively-p 'any)
               (if org-dirs
                   (with-output-to-temp-buffer "*pgpb-org-dirs*"
                     (dolist (var org-dirs)
                       (princ (format "%s\n" var))))
                 (message "No variables found that match the pattern")
                 )
             org-dirs)
           )
         )
     #+end_src

     #+RESULTS:
     : pgpb-org-dirs
   

***** Example usage
    
      The function returns the list of all my special Org directories:

      #+begin_src elisp :tangle no
        (pgpb-org-dirs)
      #+end_src

      #+RESULTS:
      : (pgpb-org-journal-dir pgpb-org-archive-dir pgpb-org-agenda-dir)




*** Encryption configuration
     
    The file will be encrypted with the [[id:ABDF6552-C523-45A5-8127-5A64DB17DACD][GPG key]] defined by: 

    #+begin_src elisp :session none :tangle no
      pgpb-gpg-key
    #+end_src

    #+RESULTS:
    : "pgpb.padilla@gmail.com"
   

*** Generating random file names

    We choose a random name, two advantages:

    1. we don't want to reveal anything about the file in it's name
    2. it can be automated

       
    #+begin_src elisp
      (defun pgpb-random-name ()
        "Return a random file name."
        (interactive)

        (require 'subr-x)
        (setq random-name
              (string-trim
               ;; todo: replace with pure-elisp function
               (shell-command-to-string
                "echo $(openssl rand -hex 5)"))))
    #+end_src

    #+RESULTS:
    : pgpb-random-name


**** Example usage

    #+begin_src elisp :tangle no :session none
      (pgpb-random-name)
    #+end_src

    #+RESULTS:
    : "8e53f17b56"

    
    
*** Configure encryption for Org files
    
    My configuration follows the method described in: [[https://orgmode.org/worg/org-tutorials/encrypting-files.html][Encrypting Org
    files]]. We store the file header in a variable which is [[id:B564F916-94A4-4DB1-A115-E423C8D7980E][added to
    new files at creation time]].

    #+begin_src elisp
      (defvar pgpb-org-header
        (format "# -*- mode:org; epa-file-encrypt-to: (\"%s\") -*-" pgpb-gpg-key)
        "Emacs header to configure GPG encryption.")
    #+end_src

    #+RESULTS:
    : pgpb-org-header


    



** Updating file collections

   After adding creating new Org files, they will not be automatically
   considered to build the agenda view. Therefore we need to refresh
   the list of agenda files.
   
   #+begin_src elisp
     (defun pgpb-org-refresh () 
       "Reload agenda files, usually to include newly created files."
       (interactive)
       (setq org-agenda-files (pgpb-org-agenda-files))
       (pgpb-refresh-refile-targets)
       (message "All Org agenda files have been reloaded."))

     (defun pgpb-refresh-refile-targets ()
       (setq org-refile-targets
             '(
               (nil :maxlevel . 3)
               (org-agenda-files :maxlevel . 3)
               (pgpb-org-journal-files :maxlevel . 3)
               (pgpb-org-archive-files :maxlevel . 3)
               )
             ))

     (defun pgpb-org-refile ()
       ;; (setq org-refile-use-outline-path 'file)
       (setq org-outline-path-complete-in-steps nil)
       (setq org-refile-allow-creating-parent-nodes 'confirm))

     (defun pgpb-org-extra-files ()
       (append
        (pgpb-org-journal-files)
        (pgpb-org-archive-files))
       )
   #+end_src


** Announce package

   #+begin_src elisp
     (provide 'pgpb-org-files)
   #+end_src

   #+RESULTS:
   : pgpb-org-files
 
