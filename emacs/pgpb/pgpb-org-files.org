#+PROPERTY: header-args :results verbatim :tangle pgpb-org-files.el :session pgpb :cache no
#+auto_tangle: true

* TODO pgpb-org-files.el

  Helper functions to deal with special categories of Org files,
  e.g. agenda, journal and archive files.

   
** TODO Package refactor/restructuring
   
   This package needs to be restructured

   1. [ ] The main thing is that
      - [ ] this package should mostly contain function definitions
      - [ ] [[file:pgpb-org.el]] should orchestrate calls to functions in this file.
   2. [ ] there should not be calls to global variables or functions
     
  
** Warning: file is autogenerated via Org Babel tangle

   #+begin_src elisp
     ;;; WARNING: Do NOT edit this file by hand.
     ;; Instead edit the Org file and regenerate this
     ;; elisp script using: org-babel-tangle (C-c C-v t)
   #+end_src

   #+RESULTS:
   : nil
   

** Org file categories

   I have three categories of files: Agenda, Journal and Archive.
   

*** Files are encrypted using Gnupg

     #+begin_src elisp
       (defvar pgpb-org-file-extension ".org.gpg"
         "File extension for encrypted Org files.")
     #+end_src


     In order find them all dynamically we use a regex:
     
     #+begin_src elisp
       (defvar pgpb-org-file-regex (concat "\\" pgpb-org-file-extension "$")
         "Regex to search entrypted Org files.")
     #+end_src


*** Agenda files

    Files that should be used when building the agenda view(s):

    #+begin_src elisp
      (defun pgpb-org-agenda-files ()
        (directory-files-recursively pgpb-org-agenda-dir pgpb-org-file-regex))
    #+end_src

    #+RESULTS:
    : pgpb-org-agenda-files
      

*** Journal files

    Files that I use to write entries that I will eventually want to
    query, e.g., any note that is not a task but that I might come
    back to but there's no action to take:

    1) these files are not used to build the agenda
    2) it is possible to refile to these files


    #+begin_src elisp
      (defun pgpb-org-journal-files ()
        (directory-files-recursively pgpb-org-journal-dir pgpb-org-file-regex))
    #+end_src
      

*** Archive files
    
    Files that I mostly keep out of [[https://en.wikipedia.org/wiki/Fear_of_missing_out][FOMO]].
    
    I purposely don't tag entries in these files with Org's keyword
    =:ARCHIVE:= since they are already in a fully separate location.

    1) these files are not used to build the agenda
    2) it is possible to refile to these files


    #+begin_src elisp
      (defun pgpb-org-archive-files ()
        (directory-files-recursively pgpb-org-archive-dir pgpb-org-file-regex))
    #+end_src

    #+RESULTS:
    : pgpb-org-archive-files
   
   
** TODO Create new Org file with encryption enabled

   Adapted from: [[id:062FBE2C-2267-4F81-9C15-0BC0A3DC84E8][General case: new empty Org file]]

   TODO:
   
   1. [ ] no global vars


   A new file can be created using one of the following methods:
   
   1. Call interactively: =M-x pgpb-org-new=
   2. Run with Babel: =C-c C-c=
      #+begin_src elisp :tangle no :results value file
        (pgpb-org-new)
      #+end_src

      #+RESULTS:
      [[file:~/org/0f6de25076/28e170260e.org.gpg]]


*** Define function: =pgpb-org-new=

    
    #+begin_src elisp
      (defun pgpb-org-new ()
        "Create new Org file. Use my GPG keys for encryption."
        (interactive)
    #+end_src

    
**** TODO Output directories for new Org files

     The newly created Org files can be saved to the locations
     defined by:

     1. [ ] fix this code block

     #+begin_src elisp :tangle no :session none
       (pgpb-org-new-options)
     #+end_src

     

**** TODO Create and open file in a new window

     1. [ ] no globals
     2. [ ] should also work with a list of gpg key ids

       
     #+begin_src elisp

         (let options (pgpb-org-new-options))
         (let selected (completing-read "Choose dir: " options nil t))
         (let out-dir (cdr (assoc selected options)))
         (let random-filename (format "%s/%s" out-dir (random-name)))
         (let new-file (concat random-filename pgpb-org-file-extension))

         ;; fix: get rid of the EPA key selection dialog
         ;; https://superuser.com/a/1446730/148349
         (setq-local epa-file-encrypt-to my-gpg-key)
         (write-region gpg-header nil new-file)
         (find-file-other-window new-file)
         (message new-file))
     #+end_src

     #+RESULTS:
     : pgpb-org-new
   

*** Map of Org directory vars to their location

    The following function creates a list of options from the list of
    possible output directories:
    
    #+begin_src elisp
      (defun pgpb-org-new-options ()
        "Return a list of options from a list of symbols"
        (interactive)

        (mapcar (lambda (symbol)
                  (cons
                   (symbol-name symbol)
                   (symbol-value symbol))
                  )
                (pgpb-org-dirs))
        )
    #+end_src

    #+RESULTS:
    : pgpb-org-new-options
    

*** TODO Directories that contain Org files

    Directories that will be used as targets for new Org files:
   
    #+begin_src elisp
      (defun pgpb-org-dirs ()
        "Directories for placing new Org files."
        (interactive)
        (cl-loop for symbol being the symbols
                 when (and (boundp symbol)
                           (string-match-p "pgpb-org-.*-dir" (symbol-name symbol)))
                 collect symbol))
    #+end_src

    #+RESULTS:
    : pgpb-org-dirs

   
**** Example output
    
     The function should return the list of all my special Org
     directories: 

     #+begin_src elisp :tangle no
       (pgpb-org-dirs)
     #+end_src

     #+RESULTS:
     : nil




*** Output file name

    We choose a random name, two advantages:

    1. we don't want to reveal anything about the file in it's name
    2. it can be automated

       
    #+begin_src elisp
      (defun random-name ()
        "Return a random file name."
        (interactive)

        (require 'subr-x)
        (setq random-name
              (string-trim
               ;; todo: replace with pure-elisp function
               (shell-command-to-string
                "echo $(openssl rand -hex 5)"))))
    #+end_src

    #+RESULTS:
    : random-name

    
*** DONE Define GPG keys for encrypting Org files
    CLOSED: [2024-08-25 So 18:35]
    :LOGBOOK:
    - CLOSING NOTE [2024-08-25 So 18:35]
    :END:

    Every file needs to specify my local GPG key. It will be used for
    encrypting Org files as described in [[https://orgmode.org/worg/org-tutorials/encrypting-files.html][Encrypting Org files]]. 

    #+begin_src elisp
      (defvar pgpb-gpg-key "pgpb.padilla@gmail.com"
        "GPG key to use for encrypting Org files.")

      (defvar pgpb-org-header
        (format "# -*- mode:org; epa-file-encrypt-to: (\"%s\") -*-" pgpb-gpg-key)
        "Emacs header to configure GPG encryption.")
    #+end_src

    #+RESULTS:
    : pgpb-org-header


    
**** Listing GPG keys available in this system

     List (public) keys (=-k=):
     
     #+begin_src bash :session none
       gpg -k pgpb.padilla
     #+end_src

     #+RESULTS:
     : pub   ed25519 2021-08-29 [SC] [verfällt: 2025-08-21]
     :       66BF0487843AB5B8F593F64124C50C592A8618EC
     : uid        [ ultimativ ] Pablo Padilla <pgpb.padilla@gmail.com>
     : sub   cv25519 2021-08-29 [E] [verfällt: 2025-08-21]
     : sub   rsa4096 2022-02-16 [E] [verfällt: 2025-08-21]
     :


     For listing private keys use =-K=.


*** TODO Reload emacs init file

    1. [ ] make this part of my emacs config
    2. [ ] move to a better location

    #+begin_src elisp :session none
      (defun reload-emacs-configuration ()
        "Reload the Emacs configuration."
        (interactive)
        (load-file user-init-file))

      ;; Bind the function to a key (optional)
      (global-set-key (kbd "C-c r") 'reload-emacs-configuration)
    #+end_src

    #+RESULTS:
    : reload-emacs-configuration


** DONE Updating file collections

   After adding creating new Org files, they will not be automatically
   considered to build the agenda view. Therefore we need to refresh
   the list of agenda files.
   
   #+begin_src elisp
     (defun pgpb-refresh-org () 
       "Reload agenda files, usually to include newly created files."
       (interactive)
       (setq org-agenda-files (pgpb-agenda-files))
       (pgpb-refresh-refile-targets)
       (message "All Org agenda files have been reloaded."))

     (defun pgpb-refresh-refile-targets ()
       (setq org-refile-targets
             '(
               (nil :maxlevel . 3)
               (org-agenda-files :maxlevel . 3)
               (pgpb-journal-files :maxlevel . 3)
               (pgpb-archive-files :maxlevel . 3)
               )
             ))

     (defun pgpb-org-refile ()
       ;; (setq org-refile-use-outline-path 'file)
       (setq org-outline-path-complete-in-steps nil)
       (setq org-refile-allow-creating-parent-nodes 'confirm))

     (defun pgpb-extra-files ()
       (append
        (pgpb-journal-files)
        (pgpb-archive-files))
       )
   #+end_src


** Announce package

   #+begin_src elisp
     (provide 'pgpb-org-files)
   #+end_src

   #+RESULTS:
   : pgpb-org-files
