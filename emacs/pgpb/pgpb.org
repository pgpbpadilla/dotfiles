#+PROPERTY: header-args :results verbatim :tangle pgpb.el :session pgpb :cache no
#+auto_tangle: t


* Emacs package: pgpb

  Defines a package namespace that configures my Emacs environment the
  way I like it.

  Produces the file [[file:pgpb.el]] using =org-tangle (C-c C-v t)=.
  
  
** Warning: file is autogenerated via Org Babel tangle

   #+begin_src elisp
     ;;; WARNING: Do NOT edit this file by hand.
     ;; Instead edit the Org file and regenerate this
     ;; elisp script using: org-babel-tangle (C-c C-v t)
     #+end_src


** Register/Install packages 

   #+begin_src elisp
     (require 'pgpb-packages)
   #+end_src
   

** Require helper functions: [[file:pgpb-helpers.org]]

   Load the necessary functions to continue the configuration of
   Emacs:
   
   #+begin_src elisp
     (require 'pgpb-helpers)
   #+end_src


** TODO Configure Emacs via helper functions

   The main work is done by calling helper functions to configure
   specific aspects of Emacs.

   #+begin_src elisp
     (pgpb-install-packages)
     (pgpb-ignore-custom-file)
     (pgpb-auto-dim-buffers)
     (pgpb-customize-vars)
     (pgpb-javascript)
     (pgpb-latex-opts)
     (pgpb-autosave)
     (pgpb-flyspell)
     (pgpb-magit)
     (pgpb-customize-appearance)
     (pgpb-global-keys)



     ;;; Helm stuff
     (require 'init-helm-projectile)

     ;;; Org Mode
     (require 'pgpb-org)

     (require 'pgpb-docker)

     (provide 'pgpb)
   #+end_src


*** TODO replace load-relative with require statements

    #+begin_src bash :session none :tangle no
      find . -name "*.el" | ack --files-from=- "load-relative" 
    #+end_src

    #+RESULTS:
    : ./pgpb.el:34:  (load-relative "./darwin.el")
    : ./pgpb.el:53:  (load-relative "./win10.el")
    : ./pgpb.el:54:  (load-relative "./wsl.el")
    : ./pgpb-packages.el:27:                      load-relative


** Darwin (macOS)-specific customisations

   #+begin_src elisp
     (when (eq system-type 'darwin)
       (load-relative "./darwin.el")
       (message "Ok: macos hacks loaded.")
       )
   #+end_src


** Linux-specific customisations!

   #+begin_src elisp
     (when (eq system-type 'gnu/linux)
       (message "Inside a Linux system")
       (use-package pinentry
         :ensure t
         :config
         (pinentry-start)
         )

       ;;; My system uses =lp= instead of =lpr=
       ;; https://stackoverflow.com/questions/28765952/emacs-printing-error-unknown-option-j
       (setq lpr-command "lp"
             lpr-add-switches nil)
       (message "Linux-specific options set"))
   #+end_src


** Windows-specific customisations

   #+begin_src elisp
     (when (eq system-type 'windows-nt)
       (load-relative "./win10.el")
       (load-relative "./wsl.el")
       (message "Ok: windows hacks loaded.")
       )

   #+end_src


** Load abbreviations

   #+begin_src elisp
     (require 'pgpb-abbrev)
   #+end_src
   

