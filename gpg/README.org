#+PROPERTY: header-args:bash :results verbatim

* GnuPG: [[https://www.gnupg.org/][site]]


** Install private GPG keys

   1. Download keys from password manager
   2. Use GPG import:

   #+begin_example bash
   gpg --import path/to/private/key.gpg
   #+end_example


** Enable pinentry in Emacs minibuffer: [[https://emacs.stackexchange.com/a/68304/11978][stackoverflow]]


   I want to provide GnuPG passphrases directly in the Emacs
   minibuffer, so we need to tell GnuPG which program to use to ask
   for them.

   
*** Backup your current GPG config

    Ensure you're not overwriting useful changes:
    
    #+begin_src bash :dir ~/.gnupg :tangle no
      tree . | egrep ".conf$"
    #+end_src
   
    #+RESULTS:
    : ├── gpg-agent.conf -> /Users/pgpb.padilla/dotfiles/gpg/macos/x86_64/gpg-agent.conf
    : ├── gpg.conf -> /Users/pgpb.padilla/dotfiles/gpg/macos/gpg.conf
   

*** Installing on macOS
    :PROPERTIES:
    :CUSTOM_ID: macos-gpg-config
    :header-args:bash: :session macos-install :shebang #!/usr/bin/env bash :tangle macos/gnupg.sh :results verbatim
    :END:

    #+begin_src bash
      ### WARN: THIS FILE IS AUTO-GENERATED FROM AN Org FILE VIA org-babel-tangle
      ### DO NOT MODIFY BY HAND
    #+end_src
    
**** Tangle and Run

     1. Tangle: =C-c C-v t= or:
        
        #+begin_src elisp :results verbatim :tangle no
          (org-babel-tangle)
        #+end_src

        #+RESULTS:
        : ("macos/gnupg.sh")
   
     2. Run:
        
        #+begin_src bash :session run-macos :tangle no
          ./macos/gnupg.sh
        #+end_src
      
        #+RESULTS:
        #+begin_example
        Location for configuration: /Users/pgpb.padilla/dotfiles/gpg/macos/x86_64
        Created config file /Users/pgpb.padilla/dotfiles/gpg/macos/x86_64/gpg-agent.conf
        /Users/pgpb.padilla/.gnupg/gpg.conf -> /Users/pgpb.padilla/dotfiles/gpg/macos/gpg.conf
        /Users/pgpb.padilla/.gnupg/gpg-agent.conf -> /Users/pgpb.padilla/dotfiles/gpg/macos/x86_64/gpg-agent.conf
        Reloading gpg-agent ...
        gpg:OpenPGP:/usr/local/Cellar/gnupg@2.2.41/2.2.41/bin/gpg
        gpgsm:S/MIME:/usr/local/Cellar/gnupg@2.2.41/2.2.41/bin/gpgsm
        gpg-agent:Geheime Schlüssel:/usr/local/Cellar/gnupg@2.2.41/2.2.41/bin/gpg-agent
        scdaemon:Smartcard:/usr/local/Cellar/gnupg@2.2.41/2.2.41/libexec/scdaemon
        dirmngr:Netz:/usr/local/Cellar/gnupg@2.2.41/2.2.41/bin/dirmngr
        pinentry:Passwort Eingabe:/usr/local/opt/pinentry/bin/pinentry
        #+end_example
   

**** Generate [[https://www.gnupg.org/documentation/manuals/gnupg/Agent-Options.html][gpg-agent.conf]] for your processor architecture

     The system architecture can be found out with:

     #+begin_src bash :tangle no
       uname -m
     #+end_src

     #+RESULTS:
     : x86_64

     The resulting file will be located under the folder for the
     corresponding architecture:

     #+begin_src bash
       CONF_DIR="$(pwd)/macos/$(uname -m)"
       if ! mkdir -p $CONF_DIR;
       then
           echo "Failed to create $CONF_DIR"
           exit -1
       fi
       echo "Location for configuration: $CONF_DIR"
     #+end_src

     
     #+RESULTS:
     : Location for configuration: /Users/pgpb.padilla/dotfiles/gpg/macos/x86_64


     To generate the file we use the following template:
     
     #+begin_src bash :results verbatim
       GPG_AGENT_CONF=$CONF_DIR/gpg-agent.conf

       cat <<EOF > $GPG_AGENT_CONF
       allow-emacs-pinentry
       pinentry-program $(brew --prefix)/bin/pinentry-mac
       EOF

       echo "Created config file $GPG_AGENT_CONF"
     #+end_src

     #+RESULTS:
     : Created config file /Users/pgpb.padilla/dotfiles/gpg/macos/x86_64/gpg-agent.conf

    
***** INFO WARN: Homebrew install path depends on system architecture: [[https://docs.brew.sh/Installation][doc]]

      #+begin_quote
      The script installs Homebrew to its default, supported, best
      prefix (*/opt/homebrew* for Apple Silicon, */usr/local* for macOS
      Intel and /home/linuxbrew/.linuxbrew for Linux) so that you don’t
      need sudo after Homebrew’s initial installation when you brew
      install. 
      #+end_quote

      The Homebrew install path changes for different processor
      architectures. To get the correct path use:

      #+begin_src bash :tangle no
        brew --prefix
      #+end_src

      #+RESULTS:
      : /opt/homebrew
     


**** Install architecture-agnostic config

     #+begin_src bash
       ln -svf $(pwd)/macos/*.conf ${HOME}/.gnupg
     #+end_src

     #+RESULTS:
     : /Users/pgpb.padilla/.gnupg/gpg.conf -> /Users/pgpb.padilla/dotfiles/gpg/macos/gpg.conf

     
**** Install architecture-specific config:

     #+begin_src bash
       ln -svf $(pwd)/macos/$(uname -m)/*.conf ${HOME}/.gnupg
     #+end_src

     #+RESULTS:
     : /Users/pgpb.padilla/.gnupg/gpg-agent.conf -> /Users/pgpb.padilla/dotfiles/gpg/macos/x86_64/gpg-agent.conf


**** Reload gpg-agent
     
    #+begin_src bash
      echo "Reloading gpg-agent ..."
      gpgconf --kill gpg-agent
      gpgconf --list-components
    #+end_src

    #+RESULTS:
    : gpg:OpenPGP:/usr/local/Cellar/gnupg@2.2.41/2.2.41/bin/gpg
    : gpgsm:S/MIME:/usr/local/Cellar/gnupg@2.2.41/2.2.41/bin/gpgsm
    : gpg-agent:Geheime Schlüssel:/usr/local/Cellar/gnupg@2.2.41/2.2.41/bin/gpg-agent
    : scdaemon:Smartcard:/usr/local/Cellar/gnupg@2.2.41/2.2.41/libexec/scdaemon
    : dirmngr:Netz:/usr/local/Cellar/gnupg@2.2.41/2.2.41/bin/dirmngr
    : pinentry:Passwort Eingabe:/usr/local/opt/pinentry/bin/pinentry
        
      
   
*** Verify pinentry prompts in minibuffer

    1. restart Emacs
    2. create/open a new encrypted Org file
    3. make some changes
    4. when saving, Emacs should prompt you for the GPG passphrase in
       the minibuffer
    

   

    

** Linux
   :PROPERTIES:
   :header-args:bash: :tangle no
   :END:

   #+begin_src bash
   echo "Intalling config for Linux ..."
   ln -svf $(pwd)/linux/*.conf ${HOME}/.gnupg
   #+end_src


** Linux: via WSL2: [[https://unix.stackexchange.com/a/655819/55912][stackexchange]]
   :PROPERTIES:
   :header-args:bash: :tangle no
   :END:

   *WARN*: The current configuration is only valid for Ubuntu under
   WSL2. 

   #+begin_src bash :results verbatim
     ln -svf $(pwd)/linux/*.conf ${HOME}/.gnupg/
   #+end_src

   
