#+PROPERTY: header-args:bash :results verbatim

* GnuPG: [[https://www.gnupg.org/][site]]

** Install private GPG keys

   1. Download keys from password manager
   2. Use GPG import:

   #+begin_example bash
   gpg --import path/to/private/key.gpg
   #+end_example


** Enable pinentry in Emacs minibuffer: [[https://emacs.stackexchange.com/a/68304/11978][stackoverflow]]
   :PROPERTIES:
   :CUSTOM_ID: macos-gpg-config
   :END:

   I want to provide GnuPG passphrases directly in the Emacs
   minibuffer, so we need to tell GnuPG which program to use to ask
   for them.
   

*** Backup your current GPG config

    Ensure you're not overwriting useful changes:
    
    #+begin_src bash :dir ~/.gnupg
      tree . | egrep ".conf$"
    #+end_src
   
    #+RESULTS:
    : ├── gpg-agent.conf -> /Users/pablo.padillabeltran/dotfiles/gpg/macos/gpg-agent.conf
    : ├── gpg.conf -> /Users/pablo.padillabeltran/dotfiles/gpg/macos/gpg.conf

    
*** Generate [[https://www.gnupg.org/documentation/manuals/gnupg/Agent-Options.html][gpg-agent.conf]] for your processor architecture

    Generate a config file for our system:
    
    #+begin_src bash :dir macos :results output file
      GPG_AGENT_CONF="$(pwd)/gpg-agent.conf.$(uname -m)"
      
      cat <<EOF > $GPG_AGENT_CONF
      allow-emacs-pinentry
      pinentry-program $(brew --prefix)/bin/pinentry-mac
      EOF

      echo $GPG_AGENT_CONF | tr -d "\n"
    #+end_src

    #+RESULTS:
    [[file:macos/gpg-agent.conf.arm64]]

    
**** INFO WARN: Homebrew install path depends on system architecture: [[https://docs.brew.sh/Installation][doc]]

     #+begin_quote
     The script installs Homebrew to its default, supported, best
     prefix (*/opt/homebrew* for Apple Silicon, */usr/local* for macOS
     Intel and /home/linuxbrew/.linuxbrew for Linux) so that you don’t
     need sudo after Homebrew’s initial installation when you brew
     install. 
     #+end_quote

     The Homebrew install path changes for different processor
     architectures. To get the correct path use:

     #+begin_src bash
       brew --prefix
     #+end_src

     #+RESULTS:
     : /opt/homebrew
     


*** Install all GnuPG config files

**** MacOS

     1. install architecture-agnostic config:
        #+begin_src bash
          ln -svf $(pwd)/macos/*.conf ${HOME}/.gnupg
        #+end_src

        #+RESULTS:
        : /Users/pablo.padillabeltran/.gnupg/gpg.conf -> /Users/pablo.padillabeltran/dotfiles/gpg/macos/gpg.conf

     2. install architecture-specific config:
        #+begin_src bash
          ARCH=$(uname -m)
          CONFIG_FILES=$(find $(pwd)/macos -name "*.conf.$ARCH")
          for file in $CONFIG_FILES;
          do
              LINK_NAME=$(basename $file ".$ARCH")
              ln -svf $file ${HOME}/.gnupg/$LINK_NAME
          done
        #+end_src

        #+RESULTS:
        : /Users/pablo.padillabeltran/.gnupg/gpg-agent.conf -> /Users/pablo.padillabeltran/dotfiles/gpg/macos/gpg-agent.conf.arm64

     3. reload gpg-agent
        #+begin_src bash
          gpgconf --kill gpg-agent
          gpgconf --list-components
        #+end_src

        #+RESULTS:
        : gpg:OpenPGP:/opt/homebrew/Cellar/gnupg@2.2.41/2.2.41/bin/gpg
        : gpgsm:S/MIME:/opt/homebrew/Cellar/gnupg@2.2.41/2.2.41/bin/gpgsm
        : gpg-agent:Geheime Schlüssel:/opt/homebrew/Cellar/gnupg@2.2.41/2.2.41/bin/gpg-agent
        : scdaemon:Smartcard:/opt/homebrew/Cellar/gnupg@2.2.41/2.2.41/libexec/scdaemon
        : dirmngr:Netz:/opt/homebrew/Cellar/gnupg@2.2.41/2.2.41/bin/dirmngr
        : pinentry:Passwort Eingabe:/opt/homebrew/opt/pinentry/bin/pinentry
        
      
   

**** Linux

     #+begin_src bash
     echo "Intalling config for Linux ..."
     ln -svf $(pwd)/linux/*.conf ${HOME}/.gnupg
     #+end_src


**** Linux: via WSL2: [[https://unix.stackexchange.com/a/655819/55912][stackexchange]]

     *WARN*: The current configuration is only valid for Ubuntu under
     WSL2. 

     #+begin_src bash :results verbatim
       ln -svf $(pwd)/linux/*.conf ${HOME}/.gnupg/
     #+end_src


*** Verify pinentry prompts in minibuffer

    1. restart Emacs
    2. create/open a new encrypted Org file
    3. make some changes
    4. when saving, Emacs should prompt you for the GPG passphrase in
       the minibuffer
    

   

    
